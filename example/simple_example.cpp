#include <iostream>

#include "lcsc.hpp"
#include <map>
#include <cmath>
#include <iomanip>
#include <string>
#include <ctime>
#include <vector>
#include <random>
#include "test/test.hpp"

double sphere_pos( vector<double> & x){
    auto y1 = 1 - pow(x[0],2) - pow(x[1],2);

    return (y1 > 0) ? sqrt(y1):0;

}
int main() {
    auto r = lcsc::mt19937_rng(123321);

    std::cout<< "100 random numbers generated by mt19937_rng engine. \n";
    for (int i = 0; i < 100; ++i) {
        std::cout << r.next() << ' ';
        if (i%10 ==0 && i>0 ) std::cout<< std::endl;
    }

    std::cout<<std::endl;
    std::cout << "The max of the rng engine is: " << r.max() << " \n";
    std::cout<< "The min of the rng engine is: " << r.min() << " \n" << std::endl;

//  for testing a uniform distribution of integers
    auto d_ui = lcsc::uniform_int_distribution(r, 0, 20);
    auto hist_ui = lcsc::hist_disc(d_ui, 10000, 1);
    hist_ui.plot(100);
    auto test_ui = lcsc::test_dist<uint64_t>(d_ui);
    std::cout<< "Estimated mean of the uniform integer distribution is" << std::endl;
    std::cout<< test_ui.test_mean( 10000) << std::endl;

    // for testing a normal distribution
    auto d_normal = lcsc::normal_distribution(r,  10.0f, 3.333f, 0.0f, 20.0f);

    auto hist_normal = lcsc::hist_cont(d_normal, 10000, 1);
    hist_normal.plot(100);

    auto test_case = lcsc::test_dist<double >(d_normal);
    std::cout<< "Estimated mean of the normal distribution is" << std::endl;
    std::cout<< test_case.test_mean( 10000) << std::endl << std::endl;

//  for testing a Poisson distribution
    auto d_poisson = lcsc::poisson_distribution(r, 10, 0, 20);
    auto hist_poisson = lcsc::hist_disc(d_poisson, 10000, 1);
    hist_poisson.plot(100);
    auto test_poisson = lcsc::test_dist<uint64_t>(d_poisson);
    std::cout<< "Estimated mean of the Poisson distribution is" << std::endl;
    std::cout<< test_poisson.test_mean( 10000) << std::endl <<std::endl;


    // test the mc_intg for int_0^1( sqrt(1-xÂ²)) dx

    auto mc_1 = lcsc::mc_intg( [](double x){ return sqrt(1 - pow(x, 2));});

    std::cout << "MC hit & miss integration result: " << mc_1.integrate_hm( r, 0.0, 1.0, 10000) << std::endl;

    std::cout << "MC ss integration result: " << mc_1.integrate_ss( r, 0.0, 1.0, 10000) << std::endl;

    std::cout << "True value of integral is " << 3.141592653/4.0 << std::endl << std::endl;
    auto f= []( vector<double> & x){ return sqrt(1 - pow(x[0], 2)-pow(x[1],2));};

    vector<double> e2 = {0.1, 0.2};
    cout<< f(e2 ) <<endl;
//
////


//  multi dimensional Monte Carlo integration

    auto mdmc_1 = lcsc::mdmc_intg( sphere_pos);
    std::vector<double > a_s = {0.0, 0.0 };
    std::vector<double > b_s = {1.0, 1.0 };

    cout<< "MDMC ss integration reuslt: " << mdmc_1.integrate_ss( r, a_s, b_s, 10000) << endl;

    cout << "True value of integral is " << 4.0/3.0*3.141592653/8.0 <<endl;

}
